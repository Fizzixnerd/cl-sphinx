;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.8
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cl:defpackage pocketsphinx
  (:nicknames ps))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'pocketsphinx-lispify)
    (cl:defun pocketsphinx-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c))))
		  (without-prefix (prefix name)
		    (cl:if (cl:string-equal prefix name
					    :end2 (cl:length prefix))
		      (cl:subseq name (cl:length prefix))
		      name)))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t "")))
		 (postfix (cl:case flag
			    (classname "")
			    (cl:t "")))
		 (name (without-prefix "ps_" name)))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
	    postfix
            fix)
           package))))))

(cffi:defcenum #.(pocketsphinx-lispify "__codecvt_result" 'enumname)
	#.(pocketsphinx-lispify "__codecvt_ok" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "__codecvt_partial" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "__codecvt_error" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "__codecvt_noconv" 'enumvalue :keyword))

(cl:export '#.(pocketsphinx-lispify "__codecvt_result" 'enumname))

(cffi:defcenum #.(pocketsphinx-lispify "fe_error_e" 'enumname)
	(#.(pocketsphinx-lispify "FE_SUCCESS" 'enumvalue :keyword) #.0)
	(#.(pocketsphinx-lispify "FE_OUTPUT_FILE_SUCCESS" 'enumvalue :keyword) #.0)
	(#.(pocketsphinx-lispify "FE_CONTROL_FILE_ERROR" 'enumvalue :keyword) #.-1)
	(#.(pocketsphinx-lispify "FE_START_ERROR" 'enumvalue :keyword) #.-2)
	(#.(pocketsphinx-lispify "FE_UNKNOWN_SINGLE_OR_BATCH" 'enumvalue :keyword) #.-3)
	(#.(pocketsphinx-lispify "FE_INPUT_FILE_OPEN_ERROR" 'enumvalue :keyword) #.-4)
	(#.(pocketsphinx-lispify "FE_INPUT_FILE_READ_ERROR" 'enumvalue :keyword) #.-5)
	(#.(pocketsphinx-lispify "FE_MEM_ALLOC_ERROR" 'enumvalue :keyword) #.-6)
	(#.(pocketsphinx-lispify "FE_OUTPUT_FILE_WRITE_ERROR" 'enumvalue :keyword) #.-7)
	(#.(pocketsphinx-lispify "FE_OUTPUT_FILE_OPEN_ERROR" 'enumvalue :keyword) #.-8)
	(#.(pocketsphinx-lispify "FE_ZERO_ENERGY_ERROR" 'enumvalue :keyword) #.-9)
	(#.(pocketsphinx-lispify "FE_INVALID_PARAM_ERROR" 'enumvalue :keyword) #.-10))

(cl:export '#.(pocketsphinx-lispify "fe_error_e" 'enumname))

(cffi:defcenum #.(pocketsphinx-lispify "cmn_type_t" 'enumname)
	(#.(pocketsphinx-lispify "CMN_NONE" 'enumvalue :keyword) #.0)
	#.(pocketsphinx-lispify "CMN_CURRENT" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "CMN_PRIOR" 'enumvalue :keyword))

(cl:export '#.(pocketsphinx-lispify "cmn_type_t" 'enumname))

(cffi:defcenum #.(pocketsphinx-lispify "agc_type_t" 'enumname)
	(#.(pocketsphinx-lispify "AGC_NONE" 'enumvalue :keyword) #.0)
	#.(pocketsphinx-lispify "AGC_MAX" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "AGC_EMAX" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "AGC_NOISE" 'enumvalue :keyword))

(cl:export '#.(pocketsphinx-lispify "agc_type_t" 'enumname))

(cffi:defcenum #.(pocketsphinx-lispify "ngram_file_type_t" 'enumname)
	(#.(pocketsphinx-lispify "NGRAM_INVALID" 'enumvalue :keyword) #.-1)
	#.(pocketsphinx-lispify "NGRAM_AUTO" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "NGRAM_ARPA" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "NGRAM_DMP" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "NGRAM_DMP32" 'enumvalue :keyword))

(cl:export '#.(pocketsphinx-lispify "ngram_file_type_t" 'enumname))

(cffi:defcenum #.(pocketsphinx-lispify "ngram_case_t" 'enumname)
	#.(pocketsphinx-lispify "NGRAM_UPPER" 'enumvalue :keyword)
	#.(pocketsphinx-lispify "NGRAM_LOWER" 'enumvalue :keyword))

(cl:export '#.(pocketsphinx-lispify "ngram_case_t" 'enumname))

(cffi:defcfun ("ps_init" #.(pocketsphinx-lispify "ps_init" 'function)) :decoder
  (config :config))

(cl:export '#.(pocketsphinx-lispify "ps_init" 'function))

(cffi:defcfun ("ps_reinit" #.(pocketsphinx-lispify "ps_reinit" 'function)) :int
  (ps :decoder)
  (config :config))

(cl:export '#.(pocketsphinx-lispify "ps_reinit" 'function))

(cffi:defcfun ("ps_args" #.(pocketsphinx-lispify "ps_args" 'function)) :pointer)

(cl:export '#.(pocketsphinx-lispify "ps_args" 'function))

(cffi:defcfun ("ps_retain" #.(pocketsphinx-lispify "ps_retain" 'function)) :decoder
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_retain" 'function))

(cffi:defcfun ("ps_free" #.(pocketsphinx-lispify "ps_free" 'function)) :int
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_free" 'function))

(cffi:defcfun ("ps_get_config" #.(pocketsphinx-lispify "ps_get_config" 'function)) :config
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_config" 'function))

(cffi:defcfun ("ps_get_logmath" #.(pocketsphinx-lispify "ps_get_logmath" 'function)) :logmath
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_logmath" 'function))

(cffi:defcfun ("ps_get_fe" #.(pocketsphinx-lispify "ps_get_fe" 'function)) :feature
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_fe" 'function))

(cffi:defcfun ("ps_get_feat" #.(pocketsphinx-lispify "ps_get_feat" 'function)) :pointer
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_feat" 'function))

(cffi:defcfun ("ps_update_mllr" #.(pocketsphinx-lispify "ps_update_mllr" 'function)) :mllr
  (ps :decoder)
  (mllr :mllr))

(cl:export '#.(pocketsphinx-lispify "ps_update_mllr" 'function))

(cffi:defcfun ("ps_get_lmset" #.(pocketsphinx-lispify "ps_get_lmset" 'function)) :ngram-model-set
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_lmset" 'function))

(cffi:defcfun ("ps_update_lmset" #.(pocketsphinx-lispify "ps_update_lmset" 'function)) :ngram-model-set
  (ps :decoder)
  (lmset :ngram-model-set))

(cl:export '#.(pocketsphinx-lispify "ps_update_lmset" 'function))

(cffi:defcfun ("ps_get_fsgset" #.(pocketsphinx-lispify "ps_get_fsgset" 'function)) :fsg-set
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_fsgset" 'function))

(cffi:defcfun ("ps_update_fsgset" #.(pocketsphinx-lispify "ps_update_fsgset" 'function)) :fsg-set
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_update_fsgset" 'function))

(cffi:defcfun ("ps_load_dict" #.(pocketsphinx-lispify "ps_load_dict" 'function)) :int
  (ps :decoder)
  (dictfile :string)
  (fdictfile :string)
  (format :string))

(cl:export '#.(pocketsphinx-lispify "ps_load_dict" 'function))

(cffi:defcfun ("ps_save_dict" #.(pocketsphinx-lispify "ps_save_dict" 'function)) :int
  (ps :decoder)
  (dictfile :string)
  (format :string))

(cl:export '#.(pocketsphinx-lispify "ps_save_dict" 'function))

(cffi:defcfun ("ps_add_word" #.(pocketsphinx-lispify "ps_add_word" 'function)) :int
  (ps :decoder)
  (word :string)
  (phones :string)
  (update :int))

(cl:export '#.(pocketsphinx-lispify "ps_add_word" 'function))

(cffi:defcfun ("ps_decode_raw" #.(pocketsphinx-lispify "ps_decode_raw" 'function)) :int
  (ps :decoder)
  (rawfh :pointer)
  (uttid :string)
  (maxsamps :long))

(cl:export '#.(pocketsphinx-lispify "ps_decode_raw" 'function))

(cffi:defcfun ("ps_decode_senscr" #.(pocketsphinx-lispify "ps_decode_senscr" 'function)) :int
  (ps :decoder)
  (senfh :pointer)
  (uttid :string))

(cl:export '#.(pocketsphinx-lispify "ps_decode_senscr" 'function))

(cffi:defcfun ("ps_start_utt" #.(pocketsphinx-lispify "ps_start_utt" 'function)) :int
  (ps :decoder)
  (uttid :string))

(cl:export '#.(pocketsphinx-lispify "ps_start_utt" 'function))

(cffi:defcfun ("ps_get_uttid" #.(pocketsphinx-lispify "ps_get_uttid" 'function)) :string
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_uttid" 'function))

(cffi:defcfun ("ps_process_raw" #.(pocketsphinx-lispify "ps_process_raw" 'function)) :int
  (ps :decoder)
  (data :pointer)
  (n_samples :pointer)
  (no_search :int)
  (full_utt :int))

(cl:export '#.(pocketsphinx-lispify "ps_process_raw" 'function))

(cffi:defcfun ("ps_process_cep" #.(pocketsphinx-lispify "ps_process_cep" 'function)) :int
  (ps :decoder)
  (data :pointer)
  (n_frames :int)
  (no_search :int)
  (full_utt :int))

(cl:export '#.(pocketsphinx-lispify "ps_process_cep" 'function))

(cffi:defcfun ("ps_get_n_frames" #.(pocketsphinx-lispify "ps_get_n_frames" 'function)) :int
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_n_frames" 'function))

(cffi:defcfun ("ps_end_utt" #.(pocketsphinx-lispify "ps_end_utt" 'function)) :int
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_end_utt" 'function))

(cffi:defcfun ("ps_get_hyp" #.(pocketsphinx-lispify "ps_get_hyp" 'function)) :string
  (ps :decoder)
  (out_best_score :pointer)
  (out_uttid :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_get_hyp" 'function))

(cffi:defcfun ("ps_get_hyp_final" #.(pocketsphinx-lispify "ps_get_hyp_final" 'function)) :string
  (ps :decoder)
  (out_is_final :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_get_hyp_final" 'function))

(cffi:defcfun ("ps_get_prob" #.(pocketsphinx-lispify "ps_get_prob" 'function)) :int
  (ps :decoder)
  (out_uttid :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_get_prob" 'function))

(cffi:defcfun ("ps_get_lattice" #.(pocketsphinx-lispify "ps_get_lattice" 'function)) :pointer
  (ps :decoder))

(cl:export '#.(pocketsphinx-lispify "ps_get_lattice" 'function))

(cffi:defcfun ("ps_seg_iter" #.(pocketsphinx-lispify "ps_seg_iter" 'function)) :pointer
  (ps :decoder)
  (out_best_score :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_seg_iter" 'function))

(cffi:defcfun ("ps_seg_next" #.(pocketsphinx-lispify "ps_seg_next" 'function)) :pointer
  (seg :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_seg_next" 'function))

(cffi:defcfun ("ps_seg_word" #.(pocketsphinx-lispify "ps_seg_word" 'function)) :string
  (seg :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_seg_word" 'function))

(cffi:defcfun ("ps_seg_frames" #.(pocketsphinx-lispify "ps_seg_frames" 'function)) :void
  (seg :pointer)
  (out_sf :pointer)
  (out_ef :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_seg_frames" 'function))

(cffi:defcfun ("ps_seg_prob" #.(pocketsphinx-lispify "ps_seg_prob" 'function)) :int
  (seg :pointer)
  (out_ascr :pointer)
  (out_lscr :pointer)
  (out_lback :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_seg_prob" 'function))

(cffi:defcfun ("ps_seg_free" #.(pocketsphinx-lispify "ps_seg_free" 'function)) :void
  (seg :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_seg_free" 'function))

(cffi:defcfun ("ps_nbest" #.(pocketsphinx-lispify "ps_nbest" 'function)) :pointer
  (ps :decoder)
  (sf :int)
  (ef :int)
  (ctx1 :string)
  (ctx2 :string))

(cl:export '#.(pocketsphinx-lispify "ps_nbest" 'function))

(cffi:defcfun ("ps_nbest_next" #.(pocketsphinx-lispify "ps_nbest_next" 'function)) :pointer
  (nbest :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_nbest_next" 'function))

(cffi:defcfun ("ps_nbest_hyp" #.(pocketsphinx-lispify "ps_nbest_hyp" 'function)) :string
  (nbest :pointer)
  (out_score :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_nbest_hyp" 'function))

(cffi:defcfun ("ps_nbest_seg" #.(pocketsphinx-lispify "ps_nbest_seg" 'function)) :pointer
  (nbest :pointer)
  (out_score :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_nbest_seg" 'function))

(cffi:defcfun ("ps_nbest_free" #.(pocketsphinx-lispify "ps_nbest_free" 'function)) :void
  (nbest :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_nbest_free" 'function))

(cffi:defcfun ("ps_get_utt_time" #.(pocketsphinx-lispify "ps_get_utt_time" 'function)) :void
  (ps :decoder)
  (out_nspeech :pointer)
  (out_ncpu :pointer)
  (out_nwall :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_get_utt_time" 'function))

(cffi:defcfun ("ps_get_all_time" #.(pocketsphinx-lispify "ps_get_all_time" 'function)) :void
  (ps :decoder)
  (out_nspeech :pointer)
  (out_ncpu :pointer)
  (out_nwall :pointer))

(cl:export '#.(pocketsphinx-lispify "ps_get_all_time" 'function))

(cffi:defcstruct #.(pocketsphinx-lispify "Hypothesis" 'classname)
	(#.(pocketsphinx-lispify "hypstr" 'slotname) :string)
	(#.(pocketsphinx-lispify "uttid" 'slotname) :string)
	(#.(pocketsphinx-lispify "best_score" 'slotname) :int))

(cl:export '#.(pocketsphinx-lispify "Hypothesis" 'classname))

(cl:export '#.(pocketsphinx-lispify "hypstr" 'slotname))

(cl:export '#.(pocketsphinx-lispify "uttid" 'slotname))

(cl:export '#.(pocketsphinx-lispify "best_score" 'slotname))

(cffi:defcstruct #.(pocketsphinx-lispify "Segment" 'classname)
	(#.(pocketsphinx-lispify "ptr" 'slotname) :pointer)
	(#.(pocketsphinx-lispify "word" 'slotname) :string)
	(#.(pocketsphinx-lispify "ascr" 'slotname) :int)
	(#.(pocketsphinx-lispify "lscr" 'slotname) :int)
	(#.(pocketsphinx-lispify "lback" 'slotname) :int)
	(#.(pocketsphinx-lispify "start_frame" 'slotname) :int)
	(#.(pocketsphinx-lispify "end_frame" 'slotname) :int))

(cl:export '#.(pocketsphinx-lispify "Segment" 'classname))

(cl:export '#.(pocketsphinx-lispify "ptr" 'slotname))

(cl:export '#.(pocketsphinx-lispify "word" 'slotname))

(cl:export '#.(pocketsphinx-lispify "ascr" 'slotname))

(cl:export '#.(pocketsphinx-lispify "lscr" 'slotname))

(cl:export '#.(pocketsphinx-lispify "lback" 'slotname))

(cl:export '#.(pocketsphinx-lispify "start_frame" 'slotname))

(cl:export '#.(pocketsphinx-lispify "end_frame" 'slotname))

(cffi:defcstruct #.(pocketsphinx-lispify "NBest" 'classname)
	(#.(pocketsphinx-lispify "ptr" 'slotname) :pointer))

(cl:export '#.(pocketsphinx-lispify "NBest" 'classname))

(cl:export '#.(pocketsphinx-lispify "ptr" 'slotname))

(cffi:defcstruct #.(pocketsphinx-lispify "Decoder" 'classname))

(cl:export '#.(pocketsphinx-lispify "Decoder" 'classname))

(cffi:defcstruct #.(pocketsphinx-lispify "Lattice" 'classname))

(cl:export '#.(pocketsphinx-lispify "Lattice" 'classname))

(cffi:defcstruct #.(pocketsphinx-lispify "FsgSet" 'classname))

(cl:export '#.(pocketsphinx-lispify "FsgSet" 'classname))


